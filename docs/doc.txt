This file documents important bits current state of understanding
about the ILEMT implementation.  So this differs from notebook.txt
which is chronological, and contains lots of irrelevant and obsolete
material.  I'll probably move this into the github wiki.


LTC25xx ADCs:

I don't know to what degree the LTC2512 is simply a crippled version
of the LTC2500, but it seems that it is genuinely optimized for higher
output rates (lower decimation).  Not only is the output data width
reduced to 24 bits, the sampling rate increases from 1 MSPS to 1.6
MSPS.  At the max sample rate (for each) the noise specs are similar.
So probably the frontend is the same, but the data paths have reduced
width, and the SAR takes fewer cycles.

wrt. this architecture, I am a little puzzled what the benefit is of
decimating from a SAR with many noise bits, vs. only having a few
noise bits.  Maybe there is better linearity, especially at very high
decimation?  But in any case, with the LTC2500-32 (in comparison to
audio ADCs), in my (limited) ADC evaluation, I had better luck getting
a wide dynamic range from peak to noise floor in the presence of
signal.  The noise floor rise I saw with signal may be due to
reference noise, but the audio parts do not have an external reference
input (which is a problem for other reasons).

In LTC SAR ADC application info there is discussion of how the ADC
driver and input caps at input affect settling of the input during the
ADC sample period.  This does not apply in any straightforward way to
our use on an AC signal.  See notebook [26 Feb 20], [3 Dec 19], but
the signal slews ~50k LSB between conversions (with 32 bit ADC), so
can never "settle".


Box assembly:

Notes on mechanical assembly of the box and the power chassis side.

Microzed mounts onto main board using M3 x 8mm male/female standoffs, with
male stud thru main board. Microzed screw is M3 x 6mm.

Two of the same mounting holes are used for the Microzed and the low-volt
regulators card. The LV regs attaches with M3 x 11mm female standoff and M3 x
6 mm screw, two screwed into studs from the Microzed standoffs.

The rails are different front and back (tapped strip slot) and top and bottom
(flush or dual level), so of the 4 ways you could put in a rail, only *one* is
correct. The flush surface of the rail must go toward the card guide or
chassis plate. The non-flush side goes towards the top and bottom
panels. Tapped strips go to front on the two sets of front rails and to the
back on the two sets of back rails.

The front/back corner rails have a corner cutout in the tapped strip side for
the corner fittings. There are two different heights of tapped strip for the
two extrusion styles. The outside corner rails use a taller one that will not
fit in the internal rails.

The card rack is recessed 30 mm wrt the box front. This requires adding 4
holes on each side panel 30 mm back from the front rail holes.

Don't mount the rear top and bottom rails until after the main board is
installed, for easier access to main board screws.

Card guides snap in with slight rotation. Insert the snap lock tab side first,
then the square post. If you need to remove, compress snap locks (on the back
side), and reverse rotation so they come out first. The spacing from slot 1 to
2 (output card to first input) is 8 * 0.2", remaining slots are 7. This means
that empty square holes are 6 and 5. There are 4 full holes and 1/2 from
rightmost card slot to right side panel.

Cut insulated spacer strips for main card mount to about 200 mm. These go
between the rear card rack rails and the front of the main board. Put the flat
side of the strip toward the rail.

Put a card in a slot to line up the main board with the card guides. Then, on
each strip, use a thin tool thru the holes in main board, insulated strip and
tapped strip to line up the holes. Use 2.5 x 10mm screws. Socket head screws
make it easier to access past the rear rail.

Tapped mounting strips are a pain if not fixed so they can't slide. After
lined up, tack in place with a bit of hot glue.


Procedures:

This page is documentation on current procedures, including specific commands
to do certain tasks.

________________
Levels, etc:

The present theory re. output levels is that the overall gain from digital
code to coil voltage should be the same across channels, and also this level
should be set by thermal limits (and near DAC full scale).  Turn off high
carriers and then measure voltage at coil as 1.15 V RMS (with 0.05 peak low
carrier amplitude).  See [6 Nov 19] and [26 Sep 19].

I have been setting the UR44 DAW output levels at -6 dB, but with
drivers set for this level the PCM1794A board doesn't have enough
output.  So you have to readjust the gain pot on the driver board when
you switch between.  To switch, you can just set the current readback
to 3.275 A.

Standardize noise floor measurements with carrier at -4 dBFS at 120mm.
Set the X-X gain to get the -4 dB, then switch to the sensor loopback
cable with HP353A attenuator to set all the gains equal.  Use the raw
data time domain RMS because the spectral measurements can be subject
to measurement problems (such as if ADC and DAC are not synchronized).

________________
Eval board issues:

Unsynch between DAC and ADC, or between ADCs, is only a problem with
the eval board setup when we are also using the UR44.

To minimize unsynch errors in spectral measurement, set spectrum
controls to flat-top order 1 blocking 2 averaging 0, and then show the
levels for "Trace display", not "Carrier levels" (which uses fixed FFT
parameters).  But this does not work all that well.

Because of time skew issues you really need to evaluate the test box
in "TCP only" mode, otherwise you get gratuitous LF noise, wrong
spectral peaks, etc.  This means you have to use "X X no-sense" mode,
and re-calibrate the distance (which is different than in vector
mode).  I am going to test the UR44 in this same mode for a
head-to-head comparison.  The noise is somewhat lower in vector mode
because of averaging across carriers.

With UR44, set the YZ carriers to zero.  This better matches what "TCP
only" mode is doing (and doesn't include any source channel
interaction effects that might exist, but are not there in TCP only
mode).
________________


Shell snips: 
________________
Send ADC data to labview:
# Has laptop IP address wired in, may change
~/labview_connect &
________________
Install new FPGA bit file:

In Vivado, Make sure to generate the bitstream file!

On windows:
cd ~/Documents/Work/ilemt_fpga/verilog/ilemt/vivado/ilemt.runs/impl_1/
scp ilemt.bit ilemt@192.168.2.15:/tmp/xillydemo.bit

On ilemt:
sudo mount /dev/mmcblk0p1 /mnt/card
cd /mnt/card
sudo cp /tmp/xillydemo.bit .
sudo reboot
________________
VNC access:
# ilemt.local works on home net
ssh -L 5905:127.0.0.1:5901  ilemt@192.168.2.15

on ilemt:
vncserver -compatiblekbd
password BogPickle
________________

Static IP address is set in:
/etc/NetworkManager/system-connections/Wired connection 1



Agilent 89410A

Set input to 1 Megohm, default 50 Ohms will load down the source,
especially if using eg. TEK 7904 "SIG OUT".

Noise measurement:

To convert between dBm and V/rtHz:
    dBm 	= log10(V^2)*10 + dB_offset
    V/rtHz 	= sqrt(10^((dBm - dB_offset)/10))

dB_offset values for R=50 with various RBW:
	RBW	offset
-------------------------------------------
	300	38

When signal is directly connected to the 89410A then the measured dBm is
dBm[true].  With input amplification:
  dBm[true] = dBm[measured] - dB_gain

To get dB_gain via 7904 SIG OUT (which is 0.5 V/div):
    dB_gain 	= -(20*log10(V/div)) - 6

gain values for various V/div:
	V/div	Gain
--------------------------------
	20uV	88 dB


To convert with amplification, use the combined offset
(dB_offset - dB_gain):
	 RBW	V/DIV	 dB
--------------------------------
	300	20uV	-50

So if dBm[measured] = -39 with 20 uV/div and RBW 300 Hz, then
    V/rtHz = 


Derivation:

V to dBm, assuming V is normalized to 1 Hz bandwidth, i.e. V/rtHz.
  P = V^2/R
  R = 50
  P[RBW] = P * RBW
  dBm = log10(P[RBW] * 1e3) * 10
  dBm = log10(V^2 * (1/50) * RBW * 1e3) * 10
  dB_offset = log10((1/50) * RBW * 1e3) * 10
  dBm = log10(V^2) * 10 + dB_offset

SIG OUT is 0.5 V/div, so -6 dB re. plugin gain


Hotplate soldering:

 -- Most recently used solder paste is SRA soldering products SSNC-C5
    Sn63Pb37 (from DigiKey).  This does dry out after stenciling, but
    still remains somewhat tacky after several hours.
 -- Set hotplate to 285, with ceramic fiber insulation on top.  (May
    not need to be this hot.)
 -- Set placed board on top of insulation, board top covered by a sheet of
    paper (for insulation).  Preheat for 3:15 minutes (ideally reaches 150 C).
 -- Reflow on hotplate.
 -- Replace insulation on hotplate, set board on insulation w/o paper
    for 20 sec.  
 -- Pick up board and hold in the air until cooled to 150 C or so.
